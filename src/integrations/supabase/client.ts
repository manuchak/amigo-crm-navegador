// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://beefjsdgrdeiymzxwxru.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJlZWZqc2RncmRlaXltenh3eHJ1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI5MzI1OTQsImV4cCI6MjA1ODUwODU5NH0.knvlRdFYtN2bl3t3I4O8v3dU_MWKDDuaBZkvukdU87w";
const SUPABASE_SERVICE_ROLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJlZWZqc2RncmRlaXltenh3eHJ1Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MjkzMjU5NCwiZXhwIjoyMDU4NTA4NTk0fQ.7alp-dJOJPuUEjiWb71LOFlRFE6QrQQxuXXSTBJwyAM";

// Create standard client for authenticated users with proper configuration
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      storage: typeof window !== 'undefined' ? window.localStorage : undefined
    }
  }
);

// Admin client with service role for privileged operations using proper configuration
export const supabaseAdmin = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_SERVICE_ROLE_KEY,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);

/**
 * Check if the current user has owner role from localStorage
 * to allow special permissions handling
 */
export const checkForOwnerRole = (): boolean => {
  try {
    if (typeof window === 'undefined') return false;
    
    const currentUserStr = localStorage.getItem('current_user');
    if (!currentUserStr) return false;
    
    const userData = JSON.parse(currentUserStr);
    return userData && userData.role === 'owner';
  } catch (e) {
    console.error("Error checking for owner role:", e);
    return false;
  }
};

/**
 * Gets a completely fresh instance of the admin client with service role key
 * and ensures correct headers are set for authentication
 */
export const getAdminClient = () => {
  try {
    // Validate required configuration
    if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
      console.error("Missing required Supabase configuration");
      throw new Error("Error de configuración: faltan credenciales de Supabase");
    }

    // Create a completely fresh client instance with explicit authorization headers
    const adminClient = createClient<Database>(
      SUPABASE_URL,
      SUPABASE_SERVICE_ROLE_KEY,
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false
        },
        global: {
          headers: {
            // Setting explicit Authorization header with the Bearer prefix and service role key
            'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
            'apikey': SUPABASE_SERVICE_ROLE_KEY,
            'Content-Type': 'application/json'
          }
        }
      }
    );
    
    return adminClient;
  } catch (error) {
    console.error("Critical error creating admin client:", error);
    throw new Error("Error crítico al inicializar cliente de administración");
  }
};

/**
 * Enhanced function to ensure we always have a valid client for API operations
 */
export const getAuthenticatedClient = async () => {
  // First check if user is owner (faster path)
  const isOwner = checkForOwnerRole();
  
  if (isOwner) {
    console.log("✅ Owner role detected - using fresh admin client");
    return getAdminClient();
  }

  try {
    // Check current session
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error("Session error:", sessionError);
      throw new Error(`Error al verificar la sesión: ${sessionError.message}`);
    }
    
    if (!session) {
      console.warn("No active session found");
      
      // Final check for owner role as fallback before failing
      if (checkForOwnerRole()) {
        console.log("No session but owner role detected in fallback - using admin client");
        return getAdminClient();
      }
      
      throw new Error("No hay sesión activa. Por favor inicie sesión nuevamente.");
    }
    
    console.log("Using authenticated client with valid session");
    return supabase;
  } catch (error) {
    console.error("Auth client error:", error);
    
    // Always fallback to admin client for owners even if there are errors
    if (checkForOwnerRole()) {
      console.log("Error occurred but owner detected - using fresh admin client");
      return getAdminClient();
    }
    
    throw error;
  }
};
