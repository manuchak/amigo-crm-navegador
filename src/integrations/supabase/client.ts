
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://beefjsdgrdeiymzxwxru.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJlZWZqc2RncmRlaXltenh3eHJ1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI5MzI1OTQsImV4cCI6MjA1ODUwODU5NH0.knvlRdFYtN2bl3t3I4O8v3dU_MWKDDuaBZkvukdU87w";
const SUPABASE_SERVICE_ROLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJlZWZqc2RncmRlaXltenh3eHJ1Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MjkzMjU5NCwiZXhwIjoyMDU4NTA4NTk0fQ.7alp-dJOJPuUEjiWb71LOFlRFE6QrQQxuXXSTBJwyAM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Common configuration for all clients
const commonOptions = {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  }
};

// Create standard client with explicit auth configuration
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    ...commonOptions,
    auth: {
      ...commonOptions.auth,
      storage: typeof window !== 'undefined' ? window.localStorage : undefined
    }
  }
);

// Admin client with service role for privileged operations
export const supabaseAdmin = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_SERVICE_ROLE_KEY,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);

/**
 * Check if the current user has owner role from localStorage
 * to allow special permissions handling
 */
export const checkForOwnerRole = (): boolean => {
  try {
    if (typeof window === 'undefined') return false;
    
    const currentUserStr = localStorage.getItem('current_user');
    if (!currentUserStr) return false;
    
    const userData = JSON.parse(currentUserStr);
    return userData && userData.role === 'owner';
  } catch (e) {
    console.error("Error checking for owner role:", e);
    return false;
  }
};

/**
 * Gets a direct reference to the supabaseAdmin client for service role operations
 * (primarily for owner users)
 */
export const getAdminClient = () => {
  // Return the admin client directly
  return supabaseAdmin;
};

/**
 * Enhanced function to ensure we always have a valid client for API operations,
 * with special handling for owner role users who will use the service role client
 */
export const getAuthenticatedClient = async () => {
  // First check if user is owner (faster path)
  const isOwner = checkForOwnerRole();
  
  if (isOwner) {
    console.log("✅ Owner role detected - using admin client");
    return supabaseAdmin;
  }

  try {
    // Check current session
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error("Session error:", sessionError);
      throw new Error(`Error al verificar la sesión: ${sessionError.message}`);
    }
    
    if (!session) {
      console.warn("No active session found");
      
      // Final check for owner role as fallback before failing
      if (checkForOwnerRole()) {
        console.log("No session but owner role detected in fallback - using admin client");
        return supabaseAdmin;
      }
      
      throw new Error("No hay sesión activa. Por favor inicie sesión nuevamente.");
    }
    
    // Check if session is about to expire (within next 60 seconds) and refresh if needed
    if (session.expires_at && session.expires_at < Math.floor(Date.now() / 1000) + 60) {
      console.log("Session expiring soon, refreshing...");
      
      const { data, error: refreshError } = await supabase.auth.refreshSession();
      
      if (refreshError || !data.session) {
        console.error("Session refresh error:", refreshError);
        
        // Last chance fallback for owners
        if (checkForOwnerRole()) {
          console.log("Session refresh failed but owner detected - using admin client");
          return supabaseAdmin;
        }
        
        throw new Error("La sesión expiró y no se pudo refrescar. Por favor inicie sesión nuevamente.");
      }
      
      console.log("Session refreshed successfully");
    }
    
    console.log("Using authenticated client with valid session");
    return supabase;
  } catch (error) {
    console.error("Auth client error:", error);
    
    // Always fallback to admin client for owners even if there are errors
    if (checkForOwnerRole()) {
      console.log("Error occurred but owner detected - using admin client");
      return supabaseAdmin;
    }
    
    throw error;
  }
};
