
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://beefjsdgrdeiymzxwxru.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJlZWZqc2RncmRlaXltenh3eHJ1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI5MzI1OTQsImV4cCI6MjA1ODUwODU5NH0.knvlRdFYtN2bl3t3I4O8v3dU_MWKDDuaBZkvukdU87w";
const SUPABASE_SERVICE_ROLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJlZWZqc2RncmRlaXltenh3eHJ1Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MjkzMjU5NCwiZXhwIjoyMDU4NTA4NTk0fQ.7alp-dJOJPuUEjiWb71LOFlRFE6QrQQxuXXSTBJwyAM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: typeof window !== 'undefined' ? window.localStorage : undefined,
    detectSessionInUrl: true
  }
});

// Mejorada función para asegurar que siempre tengamos una sesión válida
export const getAuthenticatedClient = async () => {
  try {
    // Primero, intentar obtener la sesión directamente
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error("Error al obtener la sesión:", sessionError);
      throw new Error("Error al verificar la sesión: " + sessionError.message);
    }
    
    // Si no hay sesión o está por expirar, intentar refrescarla
    if (!session || (session.expires_at && session.expires_at < Math.floor(Date.now() / 1000) - 60)) {
      console.log("Sesión no encontrada o por expirar, intentando refrescar...");
      
      // Obtener token desde localStorage como respaldo
      const localStorageKey = `sb-${SUPABASE_URL.split('//')[1].split('.')[0]}-auth-token`;
      const hasLocalStorageToken = localStorage.getItem(localStorageKey) !== null;
      
      if (hasLocalStorageToken) {
        console.log("Encontrado token en localStorage, intentando refrescar sesión...");
        const { data, error: refreshError } = await supabase.auth.refreshSession();
        
        if (refreshError) {
          console.error("Error al refrescar la sesión:", refreshError);
          localStorage.removeItem(localStorageKey); // Eliminar token inválido
          throw new Error("La sesión expiró y no se pudo refrescar. Por favor inicie sesión nuevamente.");
        }
        
        if (!data.session) {
          console.warn("Refresco de sesión no retornó una sesión válida");
          throw new Error("No se pudo restaurar la sesión. Por favor inicie sesión nuevamente.");
        }
        
        console.log("Sesión refrescada con éxito");
        return supabase;
      } else {
        throw new Error("No se encontró una sesión autenticada. Por favor inicie sesión nuevamente.");
      }
    }
    
    console.log("Usando sesión válida existente");
    return supabase;
  } catch (error) {
    console.error("Error en getAuthenticatedClient:", error);
    throw error;
  }
};

// Cliente con service role para operaciones administrativas
export const supabaseAdmin = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_SERVICE_ROLE_KEY,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);
